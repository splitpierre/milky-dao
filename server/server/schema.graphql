# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  createdAt: DateTime!
  id: String!
  project(
    orderBy: [ProjectOrderByInput!]
    skip: Float
    take: Float
    where: ProjectWhereInput
  ): [Project!]!
  slug: String
  title: String!
  updatedAt: DateTime!
}

input CategoryCreateInput {
  project: ProjectCreateNestedManyWithoutCategoriesInput
  slug: String
  title: String!
}

input CategoryCreateNestedManyWithoutProjectsInput {
  connect: [CategoryWhereUniqueInput!]
}

input CategoryListRelationFilter {
  every: CategoryWhereInput
  none: CategoryWhereInput
  some: CategoryWhereInput
}

input CategoryOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  slug: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input CategoryUpdateInput {
  project: ProjectUpdateManyWithoutCategoriesInput
  slug: String
  title: String
}

input CategoryUpdateManyWithoutProjectsInput {
  connect: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
}

input CategoryWhereInput {
  id: StringFilter
  project: ProjectListRelationFilter
  slug: StringNullableFilter
  title: StringFilter
}

input CategoryWhereUniqueInput {
  id: String!
}

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum EnumProposalStatus {
  Active
  Closed
  Pending
}

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createCategory(data: CategoryCreateInput!): Category!
  createProject(data: ProjectCreateInput!): Project!
  createProposal(data: ProposalCreateInput!): Proposal!
  createUser(data: UserCreateInput!): User!
  deleteCategory(where: CategoryWhereUniqueInput!): Category!
  deleteProject(where: ProjectWhereUniqueInput!): Project!
  deleteProposal(where: ProposalWhereUniqueInput!): Proposal!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateCategory(
    data: CategoryUpdateInput!
    where: CategoryWhereUniqueInput!
  ): Category!
  updateProject(
    data: ProjectUpdateInput!
    where: ProjectWhereUniqueInput!
  ): Project!
  updateProposal(
    data: ProposalUpdateInput!
    where: ProposalWhereUniqueInput!
  ): Proposal!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Project {
  categories(
    orderBy: [CategoryOrderByInput!]
    skip: Float
    take: Float
    where: CategoryWhereInput
  ): [Category!]!
  createdAt: DateTime!
  id: String!
  projectDescription: String
  projectIcon: String!
  projectName: String!
  proposals(
    orderBy: [ProposalOrderByInput!]
    skip: Float
    take: Float
    where: ProposalWhereInput
  ): [Proposal!]!
  updatedAt: DateTime!
}

input ProjectCreateInput {
  categories: CategoryCreateNestedManyWithoutProjectsInput
  projectDescription: String
  projectIcon: String!
  projectName: String!
  proposals: ProposalCreateNestedManyWithoutProjectsInput
}

input ProjectCreateNestedManyWithoutCategoriesInput {
  connect: [ProjectWhereUniqueInput!]
}

input ProjectListRelationFilter {
  every: ProjectWhereInput
  none: ProjectWhereInput
  some: ProjectWhereInput
}

input ProjectOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  projectDescription: SortOrder
  projectIcon: SortOrder
  projectName: SortOrder
  updatedAt: SortOrder
}

input ProjectUpdateInput {
  categories: CategoryUpdateManyWithoutProjectsInput
  projectDescription: String
  projectIcon: String
  projectName: String
  proposals: ProposalUpdateManyWithoutProjectsInput
}

input ProjectUpdateManyWithoutCategoriesInput {
  connect: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
}

input ProjectWhereInput {
  categories: CategoryListRelationFilter
  id: StringFilter
  projectDescription: StringNullableFilter
  projectIcon: StringFilter
  projectName: StringFilter
  proposals: ProposalListRelationFilter
}

input ProjectWhereUniqueInput {
  id: String!
}

type Proposal {
  createdAt: DateTime!
  id: String!
  longDescription: String
  project: Project
  shortDescription: String
  status: EnumProposalStatus
  title: String
  updatedAt: DateTime!
  user: User
}

input ProposalCreateInput {
  longDescription: String
  project: ProjectWhereUniqueInput!
  shortDescription: String
  status: EnumProposalStatus
  title: String
  user: UserWhereUniqueInput
}

input ProposalCreateNestedManyWithoutProjectsInput {
  connect: [ProposalWhereUniqueInput!]
}

input ProposalCreateNestedManyWithoutUsersInput {
  connect: [ProposalWhereUniqueInput!]
}

input ProposalListRelationFilter {
  every: ProposalWhereInput
  none: ProposalWhereInput
  some: ProposalWhereInput
}

input ProposalOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  longDescription: SortOrder
  projectId: SortOrder
  shortDescription: SortOrder
  status: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ProposalUpdateInput {
  longDescription: String
  project: ProjectWhereUniqueInput
  shortDescription: String
  status: EnumProposalStatus
  title: String
  user: UserWhereUniqueInput
}

input ProposalUpdateManyWithoutProjectsInput {
  connect: [ProposalWhereUniqueInput!]
  disconnect: [ProposalWhereUniqueInput!]
  set: [ProposalWhereUniqueInput!]
}

input ProposalUpdateManyWithoutUsersInput {
  connect: [ProposalWhereUniqueInput!]
  disconnect: [ProposalWhereUniqueInput!]
  set: [ProposalWhereUniqueInput!]
}

input ProposalWhereInput {
  id: StringFilter
  longDescription: StringNullableFilter
  project: ProjectWhereUniqueInput
  shortDescription: StringNullableFilter
  status: EnumProposalStatus
  title: StringNullableFilter
  user: UserWhereUniqueInput
}

input ProposalWhereUniqueInput {
  id: String!
}

type Query {
  _categoriesMeta(
    orderBy: [CategoryOrderByInput!]
    skip: Float
    take: Float
    where: CategoryWhereInput
  ): MetaQueryPayload!
  _projectsMeta(
    orderBy: [ProjectOrderByInput!]
    skip: Float
    take: Float
    where: ProjectWhereInput
  ): MetaQueryPayload!
  _proposalsMeta(
    orderBy: [ProposalOrderByInput!]
    skip: Float
    take: Float
    where: ProposalWhereInput
  ): MetaQueryPayload!
  _usersMeta(
    orderBy: [UserOrderByInput!]
    skip: Float
    take: Float
    where: UserWhereInput
  ): MetaQueryPayload!
  categories(
    orderBy: [CategoryOrderByInput!]
    skip: Float
    take: Float
    where: CategoryWhereInput
  ): [Category!]!
  category(where: CategoryWhereUniqueInput!): Category
  project(where: ProjectWhereUniqueInput!): Project
  projects(
    orderBy: [ProjectOrderByInput!]
    skip: Float
    take: Float
    where: ProjectWhereInput
  ): [Project!]!
  proposal(where: ProposalWhereUniqueInput!): Proposal
  proposals(
    orderBy: [ProposalOrderByInput!]
    skip: Float
    take: Float
    where: ProposalWhereInput
  ): [Proposal!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(
    orderBy: [UserOrderByInput!]
    skip: Float
    take: Float
    where: UserWhereInput
  ): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  address: String!
  createdAt: DateTime!
  firstName: String
  id: String!
  lastName: String
  proposals(
    orderBy: [ProposalOrderByInput!]
    skip: Float
    take: Float
    where: ProposalWhereInput
  ): [Proposal!]!
  roles: [String!]!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  address: String!
  firstName: String
  lastName: String
  password: String!
  proposals: ProposalCreateNestedManyWithoutUsersInput
  roles: [String!]!
  username: String!
}

type UserInfo {
  accessToken: String
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  address: SortOrder
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  address: String
  firstName: String
  lastName: String
  password: String
  proposals: ProposalUpdateManyWithoutUsersInput
  roles: [String!]
  username: String
}

input UserWhereInput {
  address: StringFilter
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  proposals: ProposalListRelationFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
